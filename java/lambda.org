#+TITLE: 深入浅出Java8 Lambda
#+DATE: <2017-10-30 Mon>
#+AUTHOR: wangyueyang
#+EMAIL: 645583145@qq.com
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="./css/style.css" />
#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline author:t c:nil creator:comment d:(not "LOGBOOK") date:t
#+OPTIONS: e:t email:nil f:t inline:t num:t p:nil pri:nil stat:t tags:t tasks:t tex:t timestamp:t toc:t todo:t |:t
#+CREATOR: Emacs 24.5.1 (Org mode 8.2.10)
#+DESCRIPTION:深入浅出的讲解Java8的lambda特性
#+EXCLUDE_TAGS: noexport
#+KEYWORDS:lambda Java8 函数式编程
#+LANGUAGE: en
#+SELECT_TAGS: export


* 让Java语言续命十年的lambda
Java8的发布是在2014年的三月份，从上图我们可以看出Java8发布之后，Java语言的使用量加速上升。曾有大牛说过这样一句话，java8
中lambda的引入，为Java语言延续了10年的寿命。这位大牛当然不是我了哈。下面我们就来看一下，lambda大法有什么样的魔力，可以让Java
继续独占编程语言排行榜的首位。
* lambda大法是什么
我们都知道计算机科学界有一个大奖，叫图灵奖，拿这个奖的人都是计算机界的顶尖人物啊。图灵提出了一种抽象计算模型，简称图灵机，
这个机器是后来计算机发展的理论基础。同学们要问了，这跟lambda有什么关系呢？且听我细讲，图灵的导师叫邱奇，在图灵发表他的可
计算性理论《论可计算数及其在判定问题上的应用》之前，邱奇已经证明了这个问题。图灵关于可计算性理论理论的证明非常复杂，而邱
奇却用十分简洁的方式做出了证明。这种方式就lambda演算。lambda演算使用到的语言就是lambda表达式。


lambda表达式描述了一组对输入数据的处理逻辑，却没有为这个操作起名字。就像我们Java中常用的匿名内部类，虽然我们定义了类中的
属性和操作，但我们也没有明确指明这个类叫什么。下面的讲解中，我们也会以匿名内部类这个大家熟悉的Java特性入手，讲解Java8中
的lambda表达式。讲解之前Java的表达式之前，我们先来看一下伟大的邱奇定义的lambda表达式：形如lambda x,y.x+y 这样的式子就是
了。这个式子包含三部分，lambda标识符；参数x和y；对参数的运算x+y。邱奇通过定义lambda表达式，以及lambda演算，定义了数字的
0、1、2...等自然数，然后又定义了逻辑真假，与或操作，定义了递归运算，通过这些定义完成了关于可计算性理论的推导。当然这是些
课外知识，有兴趣的同学可以自主了解下。

后人在lambda演算的理论基础上，发展出来了函数式编程语言，比如1958年发明的并且持续发展的lisp语言，比如前段时间火起来的
haskell。这些语言都归为函数式编程语言，为啥呢？是因为其计算理论都来源于lambda演算，代码是思维方式都是基于函数式的。语言
特性是函数式的。那么有哪些语言特性呢？
1. 将函数做为可传递的参数，这意味着函数可以调用函数，这个调用者，我们称之为高阶函数
2. 一切函数都有返回值，这意味着函数接受入参之后，经过函数处理不修改入参的原始内容，而是将修改结果返回回来。这就意味着，
   我们的函数可以被并行的调用而不需要考虑并发冲突问题。
3. 惰性求值，就是一个表达式哪怕已经给定了参数，也只会在需要的时候才进行计算
4. 闭包，同学们可以理解为一个封闭的上下文块
5. 声明式编程，我们现在在编写代码的时候，都是通过代码描述如何做一件事情。而声明式编程却是描述了我要做什么，具体怎么做是
   由底层库提供实现的

有了这些特性以后，函数式编程表现出了非凡的生命力。首先函数式语言提供了更加丰满的语义，更深层次的抽象。这意味着我们的代码
可以更加简洁，我们可以写更少的代码来实现相同的功能，在下面的利用新特性改造旧代码的环节中，我们会有更加直观的体验。其次，
函数式语言的表达方式更贴近人类的思维方式，而不是机器的逻辑思维，这种代码在别人阅读的时候更容易理解。更重要的一点，由于函
数式编程不修改数据，也就没有多线程模型中临界区间的问题，也就不用考虑线程安全问题，这样的代码可以由底层库自主选择使用任意
多个cpu去执行，而不用担心并发，死锁等问题。

    既然lambda表达式有这么多这么好的特性，那么Java中是怎么通过lambda表达式实现函数式编程，进而为广大javaer提供这些优秀的
特性的呢？
* Java8中的lambda表达式
我们写代码都是为了解决实际场景中的问题，那么我们也通过一个真实的业务场景来讲解一下java中lambda表达式是怎么写的。场景就用
我女朋友给她的学生阅卷并统计分数这个吧。我女票是语文老师前几天他们学校组织了一次期中考试，她负责改其中的一个大题就叫A题，
这个题有18分呢，并且改完之后要统计分数。在这个业务场景中呢，我们有一组试卷的对象，每个试卷对象呢，我们要判断这个试卷中的
A题是否正确，正确的在原来的分数基础上加上A题的18分，否则不用处理。同学们理解这个业务场景了吧，下面我们来通过代码描述一下。

突然她同事打来电话说要出去旅游，没时间改试卷了，让我女票给帮她改B题。那么我们的业务逻辑中就增加了些东西。我们再将这些逻
辑加入的代码的实现中。

* lambda为Java带来的革命性创新
** 集合类抽象到Stream
** 流式迭代、map和reduce
** 流式并行
* 利用新特性改造旧代码
* 总结 
